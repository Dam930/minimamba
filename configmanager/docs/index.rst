.. toctree::
   :hidden:

   Home page <self>
   Jupyter tutorials <tutorials>
   API reference <_autosummary/configmanager>
configmanager
============
# configmanager

## Installation

### Create environment

Create new Python 3.9 environment:

```
conda create --name env_name python=3.9
```

Activate the conda environment just created:

```
conda activate env_name
```

### Preliminary operations

This is an empty repo, before start programming some operations need to be done.<br/>
Here the list of operation:
* Substitute the configmanager keyword with the specific project name, running
```
  python -m utils.rename -n project_name
  ```

* Write the LICENSE file

* Write the requirements, and the requirements' dev under the already existing lines

* Complete the setup.py with description, keywords, author and mail

* Execute the following script after having substitute the 'project_remote_url' keyword with the real url where you would like to create the repository.
For example, if the project will be set in the shared library repository of Artificialy, the 'project_remote_url' keyword must be git@gitlab.com:artificialy-template/project_name.git:
  ```
  rm -rf .git
  git init --initial-branch=development
  git remote add origin -m development <project_name_url>
  git add .
  git commit -m "Initial commit"
  git push origin development
  ```

* Delete this "Preliminary operations" section

### Install dependencies

Install dependencies on the environment:

```
make install
```

or the following command if you want to install dependencies for developing mode:
```
make dev
```

## Structure

The project is composed by the following folder:

* The project folder that contain the conde of the project, we encourage tu split the project in
different subfolders, one for each project module.

* The config folder: in this folder will be stored the configuration of the project
  (i.e. json, INI, YAML, ...).

* The test folder: in this folder will be stored the python test files for pytest. A sample script is contained.

* Utils: it contains some scripts for support operations, you can add other scripts if needed.

* docs folder: it contains the documentation in html folder, the documentation is autogenerated, do not
modify the folder content. (see utils chapter)

The project also contain the following files:

* requirements/requirements_dev for package required by the project. You can append the package needed.

* Changelog.md is an autogenerated code, contains the history of changelog commits. (see utils chapter)

* setup.py is the project installer, which is the standard for distributing Python Modules. If you want to
install the project (typically for external use) launch
  ```
  python setup.py install
  ```

## Utils

The project contains a make file with some standard operation that helps you to better
manage the project and the code.
The possible operations are:

* Print all the available make commands:
```
make help
```

* Fix the code format with black tool:
```
make format
```

* Fix the bug and code style using lint:
```
make lint
```

* Run the test:
```
make test
```

* Create the project documentation in html format:
```
make doc
```

* Run the following command before merging your branch for update changelog
using the last commit (remember to push)
```
make changelog
```

* When merged on master, run this command to increase patch, minor and major version respectively and create a tag (remember to push).
Remember to create the release manually afterwards.
```
make [patch|minor|major]
```
